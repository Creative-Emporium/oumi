# Example command:
# oumi launch up -c scripts/panos_variations_temp/gcp_job_live_coding.yaml --cluster panos-dev
# sky autostop panos-dev -i 200

name: panos-dev

num_nodes: 1
resources:
  cloud: gcp
  accelerators: "A100-80GB:1"
  use_spot: false
  disk_size: 2000 # Disk size in GBs

working_dir: .

file_mounts:
  ~/.netrc: ~/.netrc  # WandB credentials
  # Mount HF token, which is needed to download locked-down models from HF Hub.
  # This is created on the local machine by running `huggingface-cli login`.
  ~/.cache/huggingface/token: ~/.cache/huggingface/token

storage_mounts:
  /output_gcs_bucket:
    source: gs://oumi-dev-us-central1 # GCS bucket to store output
    store: gcs

envs:
  WANDB_PROJECT: oumi-train
  OUMI_RUN_NAME: llama1b.fft
  ACCELERATE_LOG_LEVEL: info
  # https://github.com/huggingface/tokenizers/issues/899#issuecomment-1027739758
  TOKENIZERS_PARALLELISM: false
  TRAIN_CONFIG: configs/recipes/llama3_2/sft/1b_full/panos_variations/train_basis_with_eval_on_all_data.yaml # SELECT PROPER ONE

setup: |
  set -e
  pip install uv && uv pip install '.[gpu]' hf_transfer
  uv pip install "vllm>=0.6.3,<0.7.0"
  uv pip install '.[dev,gcp,quant]'

  # Install model from HF Hub. This tool increases download speed compared to
  # downloading the model during training.
  HF_HUB_ENABLE_HF_TRANSFER=1 huggingface-cli download meta-llama/Llama-3.2-1B-Instruct

run: |
  set -e  # Exit if any command failed.
  source ./configs/examples/misc/sky_init.sh

  # set -x
  # uv pip install --upgrade --no-deps --force-reinstall '.[gpu]'

  # torchrun \
  #     --nnodes=${OUMI_NUM_NODES} \
  #     --node-rank=${SKYPILOT_NODE_RANK} \
  #     --nproc-per-node=${SKYPILOT_NUM_GPUS_PER_NODE} \
  #     --master-addr=${OUMI_MASTER_ADDR} \
  #     --master-port=8007 \
  #     -m oumi.train \
  #     -c ${TRAIN_CONFIG} \
  #     "training.run_name='${OUMI_RUN_NAME}.${SKYPILOT_TASK_ID}'" \
  #     "training.output_dir='/output_gcs_bucket/lema-balerion/training_runs/panos/corroborate/for_manos_showcase_2/${OUMI_RUN_NAME}.${SKYPILOT_TASK_ID}'"

  # echo "Node ${SKYPILOT_NODE_RANK} is all done!"
