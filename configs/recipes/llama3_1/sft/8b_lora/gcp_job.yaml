# Config to LoRA tune Llama 3.1 8B Instruct on 1 GCP node.
# Example command:
# oumi launch up -c configs/recipes/llama3_1/sft/8b_lora/gcp_job.yaml --cluster llama8b-lora
name: llama8b-lora

resources:
  cloud: gcp
  accelerators: "A100-80GB:8"
  # Allow Spot VM-s for A100 40GB GPUs, which are plentiful on GCP, and cost ~3X less.
  use_spot: true
  # use_spot: false
  region: us-east4

# Upload working directory to remote ~/sky_workdir.
working_dir: .

# Mount local files.
file_mounts:
  ~/.netrc: ~/.netrc  # WandB credentials
  # Mount HF token, which is needed to download locked-down models from HF Hub.
  # This is created on the local machine by running `huggingface-cli login`.
  ~/.cache/huggingface/token: ~/.cache/huggingface/token

storage_mounts:
  /gcs_dir:
    source: gs://oumi-dev-us-central1
    store: gcs

envs:
  WANDB_PROJECT: oumi-train
  OUMI_RUN_NAME: llama8b.lora
  ACCELERATE_LOG_LEVEL: info
  # WANDB_RESUME: must
  # WANDB_RUN_ID: mdr6e7vh
  # https://github.com/huggingface/tokenizers/issues/899#issuecomment-1027739758
  TOKENIZERS_PARALLELISM: false

setup: |
  set -e
  pip install uv && uv pip install '.[gpu]' hf_transfer
  # Install model from HF Hub. This tool increases download speed compared to
  # downloading the model during training.
  HF_HUB_ENABLE_HF_TRANSFER=1 huggingface-cli download meta-llama/Llama-3.1-8B-Instruct --exclude original/*

run: |
  set -e  # Exit if any command failed.
  source ./configs/examples/misc/sky_init.sh
  pip install '.'

  set -x
  oumi distributed torchrun \
    -m oumi train -c configs/recipes/llama3_1/sft/8b_lora/train.yaml

  echo "Node ${SKYPILOT_NODE_RANK} is all done!"
